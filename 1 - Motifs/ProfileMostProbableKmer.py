"""
Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.

Input: A string Text, an integer k, and a 4 Ã— k matrix Profile.
Output: A Profile-most probable k-mer in Text.

Sample Input:

ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
5
0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2


Sample Output:

CCGAG
"""
import numpy as np 
from copy import copy 

# String
string = "GCCCTTTTACCTGGGATCAAAAGGTCAAAGAGGCACGCAATTCTCGGCCGAGTAGTGGCTGGCAGACGCCAACACGAAGTCGAAACAGTTTCAGCGGTGCGACAAAAGTATCGTGCATTCAACTACGATACTTGTAGGTAACATTCGGTGGTCCGGTCCGTGCGAAGCGAGTATTGCTAGGGCTTATCGTAGTGACTCTGGGATATGCAAGCGTGCCTCAAAGCCCTTTATAGTTCGGAAATGTGGAAAAGAGTTTATCGGATGAGCCTTTTGCGCCCCCGTCACTACTTGTGGTCGTATAGATTTCTTCGTGGTAGTACCGCTTCGCTGATGTCTCGCGGACTATCCGAGTTTCCCCGCGTCCGCAGAAGCAACTGATTAGCTCACTAGACCGATCCCTAGTACGGTACACCGATATGTCTGCGACGCACAGGTGGTTAGAAAGCGGCAGGACTTCTAAAACGTTTTTAACAATGAAGGTATATCCTCCGCGCTTGCAGGCTGCGGCCTTATGATAAAATACTGCTCGTTAGAACGTGGAAACGGCGACTAATAGCACGCTTGCGTTGCTGCGGAACGGTCGTGTAACAGCACGACCGATACAGGGAACACACTTTTATTTTGGTGACAGACAAGGAGGCCGTGAAGACTTGTTTGCATAAAAGCAGTCCCGGTCCATATCTAATTGGCCCATCGCGTTTGAAACTGAGTAGCCGGCCACACAGTCCTCGGGACCCGGCATACTACCGTATAAACCGTCGTCGCGCTCCCCGCTAGGTATGGATTCCTAAAGGATACAAAATGTGGTAAAACCGTCACAGAATAGGGCTCTTCCCGCACACGCACGCCGAGATAACGACCGCAATTCTTGGTTAGTGATGAAAACAAAAGCGAGCTGAGCGCCGAGTCATTTACCCGTAGATGATTCCGCCGATGCTAACTCCCACGCCCTTGCTAATTTTCATTCCCAGTTAGCTAAGAGGTATAGTACCTTAGTATA"

#k 
k = 13

#Profile ; 4 x k matrix 
Profile = np.array([[0.303, 0.25, 0.211 ,0.25, 0.237, 0.184, 0.237, 0.303, 0.171, 0.211, 0.158, 0.368, 0.276], \
	[0.224, 0.184, 0.197, 0.237 ,0.289, 0.263, 0.197, 0.224, 0.342, 0.368, 0.224, 0.145, 0.25],\
	[0.197, 0.289, 0.355, 0.276, 0.211, 0.25, 0.289, 0.184, 0.237, 0.263 ,0.211, 0.329, 0.237], \
	[0.276, 0.276 ,0.237 ,0.237, 0.263, 0.303, 0.276, 0.289, 0.25, 0.158 ,0.408 ,0.158, 0.237]])

#Number of kmers 
number_kmers = len(string) - k + 1 

#Find most Profile-most probable k-mer
best_prob = 0 
best_kmer = ""
for kmer_start in range(number_kmers): 
	prob = 1 
	for kmer_position in range(k): 
		Base = string[kmer_start + kmer_position]
		if Base == "A": 
			prob *= Profile[0][kmer_position]
		elif Base == "C": 
			prob *= Profile[1][kmer_position]
		elif Base == "G": 
			prob *= Profile[2][kmer_position]
		else:
			prob *= Profile[3][kmer_position] 
	if prob > best_prob: 
		best_prob = copy(prob)
		best_kmer = copy(string[kmer_start:kmer_start+k])

print(best_kmer)
print(best_prob)
